## @file
# Azure Pipelines step template to build for a pull request.
#
# Copyright (c) Microsoft Corporation. All rights reserved.
# SPDX-License-Identifier: BSD-2-Clause-Patent
##

parameters:
- name: artifacts_binary
  displayName: Binary Artifacts to Publish
  type: string
  default: ''
- name: artifacts_identifier
  displayName: Artifacts Identifier
  type: string
  default: 'Artifacts'
- name: artifacts_other
  displayName: Other Artifacts to Publish
  type: string
  default: ''
- name: build_archs
  displayName: Architectures (e.g. IA32, X64)
  type: string
  default: ''
- name: build_file
  displayName: Stuart Build File
  type: string
  default: ".pytool/CISettings.py"
- name: build_pkgs
  displayName: Packages
  type: string
  default: ''
- name: build_targets
  displayName: Targets (e.g. DEBUG, RELEASE)
  type: string
  default: ''
- name: do_ci_build
  displayName: Perform Stuart CI Build
  type: boolean
  default: true
- name: do_ci_setup
  displayName: Perform Stuart CI Setup
  type: boolean
  default: true
- name: do_non_ci_build
  displayName: Perform non-CI Stuart Build
  type: boolean
  default: false
- name: do_non_ci_setup
  displayName: Perform non-CI Stuart Setup
  type: boolean
  default: false
- name: do_pr_eval
  displayName: Perform Stuart PR Evaluation
  type: boolean
  default: true
- name: extra_build_args
  displayName: Extra Build Command Arguments
  type: string
  default: ''
- name: extra_install_step
  displayName: Extra Install Steps
  type: stepList
  default: []
- name: extra_post_build_steps
  displayName: Extra Post-Build Steps
  type: stepList
  default: []
- name: install_tools
  displayName: Install Build Tools
  type: boolean
  default: true
- name: tool_chain_tag
  displayName: Tool Chain (e.g. VS2022)
  type: string
  default: ''
- name: checkout_self
  displayName: Perform self checkout step
  type: boolean
  default: true
- name: self_host_agent
  displayName: Indicate if this is a selfhost agent
  type: boolean
  default: false

steps:
- ${{ if eq(parameters.checkout_self, true) }}:
  - checkout: self
    clean: true
    fetchDepth: 0
    # Note: Depth cannot be limited if PR Eval is used

- template: SetupPythonPreReqs.yml
  parameters:
    install_python: ${{ parameters.install_tools }}

# Set Default Package Info
- bash: |
    echo "##vso[task.setvariable variable=pkgs_to_build]${{ parameters.build_pkgs }}"
    echo "##vso[task.setvariable variable=pkg_count]${{ 1 }}"

# Trim the package list if this is a PR
- ${{ if eq(parameters.do_pr_eval, true) }}:
  - powershell:
      $TargetBranch = "$(System.PullRequest.targetBranch)".replace('refs/heads/', '');
      Write-Host "##vso[task.setvariable variable=pr_compare_branch]origin/$TargetBranch";
    displayName: Workaround for Branch Names
    condition: eq(variables['Build.Reason'], 'PullRequest')
  - task: CmdLine@2
    displayName: Check if ${{ parameters.build_pkgs }} Needs Testing
    inputs:
      script: stuart_pr_eval -c ${{ parameters.build_file }} -p ${{ parameters.build_pkgs }} --pr-target $(pr_compare_branch) --output-csv-format-string "##vso[task.setvariable variable=pkgs_to_build]{pkgcsv}" --output-count-format-string "##vso[task.setvariable variable=pkg_count]{pkgcount}"
    condition: eq(variables['Build.Reason'], 'PullRequest')

- ${{ if eq(parameters.install_tools, true) }}:
  - template: InstallSpellCheck.yml

- ${{ if eq(parameters.install_tools, true) }}:
  - template: InstallMarkdownLint.yml

- ${{ if eq(parameters.install_tools, true) }}:
  - template: InstallCoverageTools.yml

# Potential Extra steps
- ${{ if eq(parameters.self_host_agent, false) }}:
  - ${{ parameters.extra_install_step }}
- ${{ else }}:
  - bash: echo "##[warning]A self-hosted agent build requested extra install steps. Those are not supported right now."

# Build repo
- ${{ if eq(parameters.do_ci_setup, true) }}:
  - task: CmdLine@2
    displayName: CI Setup ${{ parameters.build_pkgs }} ${{ parameters.build_archs}}
    inputs:
      script: stuart_ci_setup -c ${{ parameters.build_file }} -p $(pkgs_to_build) --force-git -t ${{ parameters.build_targets}} -a ${{ parameters.build_archs}} TOOL_CHAIN_TAG=${{ parameters.tool_chain_tag}}
    condition: and(gt(variables.pkg_count, 0), succeeded())

- ${{ if eq(parameters.do_non_ci_setup, true) }}:
  - task: CmdLine@2
    displayName: Setup ${{ parameters.build_pkgs }} ${{ parameters.build_archs}}
    inputs:
      script: stuart_setup -c ${{ parameters.build_file }} -p $(pkgs_to_build) -t ${{ parameters.build_targets}} -a ${{ parameters.build_archs}} TOOL_CHAIN_TAG=${{ parameters.tool_chain_tag}}
    condition: and(gt(variables.pkg_count, 0), succeeded())

- task: CmdLine@2
  displayName: Update ${{ parameters.build_pkgs }} ${{ parameters.build_archs}}
  inputs:
    script: stuart_update -c ${{ parameters.build_file }} -p $(pkgs_to_build) -t ${{ parameters.build_targets}} -a ${{ parameters.build_archs}} TOOL_CHAIN_TAG=${{ parameters.tool_chain_tag}}
  condition: and(gt(variables.pkg_count, 0), succeeded())

- ${{ if eq(parameters.do_non_ci_build, true) }}:
  - task: CmdLine@2
    displayName: Build and Test ${{ parameters.build_pkgs }} ${{ parameters.build_archs}}
    inputs:
      script: stuart_build -c ${{ parameters.build_file }} -p $(pkgs_to_build) -t ${{ parameters.build_targets}} -a ${{ parameters.build_archs}} TOOL_CHAIN_TAG=${{ parameters.tool_chain_tag}} ${{ parameters.extra_build_args}}
    condition: and(gt(variables.pkg_count, 0), succeeded())

- ${{ if eq(parameters.do_ci_build, true) }}:
  - task: CmdLine@2
    displayName: CI Build and Test ${{ parameters.build_pkgs }} ${{ parameters.build_archs}}
    inputs:
      script: stuart_ci_build -c ${{ parameters.build_file }} -p $(pkgs_to_build) -t ${{ parameters.build_targets}} -a ${{ parameters.build_archs}} TOOL_CHAIN_TAG=${{ parameters.tool_chain_tag}} ${{ parameters.extra_build_args}}
    condition: and(gt(variables.pkg_count, 0), succeeded())

# Potential post-build steps
- ${{ parameters.extra_post_build_steps }}

# Publish Test Results to Azure Pipelines/TFS
- task: PublishTestResults@2
  displayName: Publish junit Test Results
  continueOnError: true
  condition: and(gt(variables.pkg_count, 0), succeededOrFailed())
  inputs:
    testResultsFormat: 'JUnit'                  # Options: JUnit, NUnit, VSTest, xUnit
    testResultsFiles: 'Build/TestSuites.xml'
    mergeTestResults: true                      # Optional
    testRunTitle: $(System.JobName)             # Optional
    publishRunAttachments: true                 # Optional

# Publish Test Results to Azure Pipelines/TFS
- task: PublishTestResults@2
  displayName: Publish Host-Based Unit Test Results for $(System.JobName)
  continueOnError: true
  condition: and(gt(variables.pkg_count, 0), succeededOrFailed())
  inputs:
    testResultsFormat: 'JUnit'                  # Options: JUnit, NUnit, VSTest, xUnit
    testResultsFiles: 'Build/**/*.result.xml'
    mergeTestResults: false                     # Optional
    testRunTitle: ${{ parameters.build_pkgs }}  # Optional
    publishRunAttachments: true                 # Optional

# Copy build logs to the artifact staging directory
- template: CommonLogCopyAndPublish.yml
  parameters:
    artifacts_identifier: ${{ parameters.artifacts_identifier }}

# Copy build binaries to the artifact staging directory
- template: BinaryCopyAndPublish.yml
  parameters:
    artifacts_binary: ${{ parameters.artifacts_binary }}
    artifacts_identifier: ${{ parameters.artifacts_identifier }}

# Copy other files to the artifact staging directory
- template: OtherCopyAndPublish.yml
  parameters:
    artifacts_other: ${{ parameters.artifacts_other }}
    artifacts_identifier: ${{ parameters.artifacts_identifier }}
