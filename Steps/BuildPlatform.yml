## @file
# Azure Pipelines step template to build a platform.
#
# Copyright (c) Microsoft Corporation. All rights reserved.
# SPDX-License-Identifier: BSD-2-Clause-Patent
##

parameters:
- name: artifacts_binary
  displayName: Binary Artifacts to Publish
  type: string
  default: ''
- name: artifacts_identifier
  displayName: Artifacts Identifier
  type: string
  default: 'Artifacts'
- name: artifacts_other
  displayName: Other Artifacts to Publish
  type: string
  default: ''
- name: build_base_tools
  displayName: Build BaseTools
  type: boolean
  default: false
- name: build_file
  displayName: Build File
  type: string
  default: ''
- name: build_flags
  displayName: Build Flags
  type: string
  default: ''
- name: build_pkg
  displayName: Build Package
  type: string
  default: ''
- name: build_target
  displayName: Build Target (e.g. DEBUG, RELEASE)
  type: string
  default: ''
- name: extra_install_step
  displayName: Extra Install Steps
  type: stepList
  default: []
- name: run_flags
  displayName: Run Flags
  type: string
  default: ''
- name: run_timeout
  displayName: Run Timeout (in minutes)
  type: number
  default: 5
- name: install_tools
  displayName: Install Build Tools
  type: boolean
  default: true
- name: install_pip_modules
  displayName: Install PIP Modules
  type: boolean
  default: true
- name: tool_chain_tag
  displayName: Tool Chain (e.g. VS2022)
  type: string
  default: ''
- name: checkout_self
  displayName: Perform self checkout step
  type: boolean
  default: true
- name: publish_artifacts
  displayName: Publish Artifacts
  type: boolean
  default: true

steps:
- ${{ if eq(parameters.checkout_self, true) }}:
  - checkout: self
    clean: true
    fetchDepth: 0
    # Note: Depth cannot be limited if PR Eval is used. A pipeline may choose
    #       to use a shallow checkout if PR eval is not used.

- template: SetupPythonPreReqs.yml
  parameters:
    install_python: ${{ parameters.install_tools }}
    install_pip_modules: ${{ parameters.install_pip_modules }}

# Set default
- bash: echo "##vso[task.setvariable variable=pkg_count]${{ 1 }}"

# trim the package list if this is a PR
- powershell:
    $TargetBranch = "$(System.PullRequest.targetBranch)".replace('refs/heads/', '');
    Write-Host "##vso[task.setvariable variable=pr_compare_branch]origin/$TargetBranch";
  displayName: Workaround for Branch Names
  condition: eq(variables['Build.Reason'], 'PullRequest')
- task: CmdLine@2
  displayName: Check if ${{ parameters.build_pkg }} Needs Testing
  inputs:
    script: stuart_pr_eval -c ${{ parameters.build_file }} -t ${{ parameters.build_target}} --pr-target $(pr_compare_branch) --output-count-format-string "##vso[task.setvariable variable=pkg_count]{pkgcount}"
  condition: eq(variables['Build.Reason'], 'PullRequest')

 # Setup repo
- task: CmdLine@2
  displayName: Setup
  inputs:
    script: stuart_setup -c ${{ parameters.build_file }} TOOL_CHAIN_TAG=${{ parameters.tool_chain_tag}} -t ${{ parameters.build_target}} ${{ parameters.build_flags}}
  condition: and(gt(variables.pkg_count, 0), succeeded())

# Stuart Update
- task: CmdLine@2
  displayName: Update
  inputs:
    script: stuart_update -c ${{ parameters.build_file }} TOOL_CHAIN_TAG=${{ parameters.tool_chain_tag}} -t ${{ parameters.build_target}} ${{ parameters.build_flags}}
  condition: and(gt(variables.pkg_count, 0), succeeded())

# build basetools
#   do this after setup and update so that code base dependencies
#   are all resolved.
- ${{ if eq(parameters.build_base_tools, true) }}:
  - template: BuildBaseTools.yml
    parameters:
      tool_chain_tag: ${{ parameters.tool_chain_tag }}

# Potential Extra steps
- ${{ parameters.extra_install_step }}

# Build
- task: CmdLine@2
  displayName: Build
  inputs:
    script: stuart_build -c ${{ parameters.build_file }} TOOL_CHAIN_TAG=${{ parameters.tool_chain_tag}} TARGET=${{ parameters.build_target}} ${{ parameters.build_flags}}
  condition: and(gt(variables.pkg_count, 0), succeeded())

# Run
- task: CmdLine@2
  displayName: Run to Shell
  inputs:
    script: stuart_build -c ${{ parameters.build_file }} TOOL_CHAIN_TAG=${{ parameters.tool_chain_tag}} TARGET=${{ parameters.build_target}} ${{ parameters.build_flags}} ${{ parameters.run_flags }} --FlashOnly
  condition: and(and(gt(variables.pkg_count, 0), succeeded()), eq(variables['Run'], true))
  timeoutInMinutes: ${{ parameters.run_timeout }}

# Copy build logs to the artifact staging directory
- template: CommonLogCopyAndPublish.yml
  parameters:
    artifacts_identifier: ${{ parameters.artifacts_identifier }}
    publish_artifacts: ${{ parameters.publish_artifacts }}

# Copy build binaries to the artifact staging directory
- template: BinaryCopyAndPublish.yml
  parameters:
    artifacts_binary: ${{ parameters.artifacts_binary }}
    artifacts_identifier: ${{ parameters.artifacts_identifier }}
    publish_artifacts: ${{ parameters.publish_artifacts }}

# Copy other files to the artifact staging directory
- template: OtherCopyAndPublish.yml
  parameters:
    artifacts_other: ${{ parameters.artifacts_other }}
    artifacts_identifier: ${{ parameters.artifacts_identifier }}
    publish_artifacts: ${{ parameters.publish_artifacts }}
