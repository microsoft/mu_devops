## @file
# Azure Pipelines step template upload code coverage to codecov.io
#
# Set `coverage_upload_target` to `codecov` or `ado` rather than passing it
# as a parameter to this template.
#
# Follows the codecov.io documentation for uploading code coverage reports:
# https://docs.codecov.com/docs/codecov-uploader
#
# Copyright (c) Microsoft Corporation. All rights reserved.
# SPDX-License-Identifier: BSD-2-Clause-Patent
##

parameters:
- name: report_dir
  displayName: Code Coverage Report
  type: string
  default: ''
- name: flag
  displayName: Use Package Flags
  type: string
  default: ''
- name: install_dependencies
  displayName: Install Pypi Dependencies
  type: boolean
  default: true

steps:
- task: PythonScript@0
  displayName: Detect Code Coverage Target and Files
  env:
    UPLOAD_TARGET: $(coverage_upload_target)
    REPORT_DIR: ${{ parameters.report_dir }}
  inputs:
    scriptSource: inline
    script: |
      import os
      from pathlib import Path

      UPLOAD_TARGET = os.environ['UPLOAD_TARGET']
      REPORT_DIR = os.environ['REPORT_DIR']

      print(f'##vso[task.setvariable variable=upload_target]{UPLOAD_TARGET}')
      print(f'Code Coverage Upload Target: {UPLOAD_TARGET}')

      print(f'##vso[task.setvariable variable=coverage_file_count]{len(list(Path(REPORT_DIR).rglob("*coverage.xml")))}')
      print(f'Code Coverage Files: {list(Path(REPORT_DIR).rglob("*coverage.xml"))}')
#
# Steps to upload to Azure DevOps
#
- task: PublishCodeCoverageResults@2
  displayName: "Coverage ADO ${{ parameters.flag }}: Publish"
  inputs:
    summaryFileLocation: '${{ parameters.report_dir }}/**/*coverage.xml'
  condition:  and(eq(variables['upload_target'] , 'ado'), gt(variables.coverage_file_count, 0))
#
# All Steps to upload to codecov.io
#
- ${{ if eq(parameters.install_dependencies, true) }}:
  - bash: |
      pip install codecov-cli==10.*
    displayName: "Coverage CodeCov ${{ parameters.flag }}: Install Python Dependencies"
    condition: and(eq(variables['upload_target'] , 'codecov'), gt(variables.coverage_file_count, 0))

- task: PythonScript@0
  displayName: "Coverage CodeCov ${{ parameters.flag }}: Upload Results"
  condition:  and(eq(variables['upload_target'] , 'codecov'), gt(variables.coverage_file_count, 0))
  env:
    COV_FLAG: ${{ parameters.flag }}
    REPORT_DIR: ${{ parameters.report_dir }}
    TOKEN: $(CODECOV_TOKEN)
  inputs:
    scriptSource: inline
    script: |
      import os
      import subprocess

      COV_FLAG = os.environ['COV_FLAG']
      REPORT_DIR = os.environ['REPORT_DIR']
      TOKEN = os.environ['TOKEN']

      cmd = f'codecov --verbose upload-process -Z -s {REPORT_DIR} -t {TOKEN}'

      if COV_FLAG:
        cmd += f' -F {COV_FLAG}'
      
      process = subprocess.Popen(
        cmd,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        shell=True
      )
      output, error = process.communicate()
      print(f"##[debug]{output.decode('utf-8')}")
      if process.returncode != 0:
        print(f"##[error]{error.decode('utf-8')}")
        raise Exception(f"codecov upload-process failed with Return Code: "
                        f"{process.returncode}.")
