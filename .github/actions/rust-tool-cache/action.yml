# A GitHub action that loads rust tools and toolchains from cache. If there is a miss, it will install
# them. the tools are read from the tools section of the rust-toolchain.toml file at the root of the repository.
#
# Copyright (c) Microsoft Corporation.
# SPDX-License-Identifier: BSD-2-Clause-Patent
#

name: "Install Rust Tools"
description: "This action loads rust tools and toolchains from cache, or installs them."

runs:
  using: composite
  steps:
    - name: Rust Tool Cache
      id: tool-cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.rustup/toolchains/
        key: ${{ runner.os }}-rust-tools-${{ hashFiles('**/rust-toolchain.toml' )}}

    - name: Install cargo-binstall
      uses: cargo-bins/cargo-binstall@v1.10.17

    # Read any tools from rust-toolchain.toml file and installs them
    - name: Install Rust Tools
      shell: bash
      run: |
        FILE="rust-toolchain.toml"

        if [ ! -f "$FILE" ]; then
          echo "::error::File $FILE not found."
          exit 1
        fi

        if ! grep -q '^\[tools\]' "$FILE"; then
          echo "::warning::[tools] section not found in $FILE."
          exit 1
        fi

        # Extract tools section from rust-toolchain.toml
        sed -n '/\[tools\]/,/^$/p' "$FILE" | grep -v '\[tools\]' | while read -r line; do
          # Extract tool name and clean it
          TOOL_NAME=${line%%=*}
          TOOL_NAME=${TOOL_NAME//[[:space:]]/}
          TOOL_NAME="${TOOL_NAME//$'\n'/}"

          # Extract tool version and clean it
          TOOL_VERSION=${line#*=}
          TOOL_VERSION=${TOOL_VERSION//[[:space:]]/}
          TOOL_VERSION=${TOOL_VERSION//\"/}
          TOOL_VERSION="${TOOL_VERSION//$'\n'/}"

          echo ""
          echo "##################################################################"
          echo "Installing $TOOL_NAME@$TOOL_VERSION"
          echo "##################################################################"
          echo ""

          # Attempt to binstall the tool first. If it fails, install it using cargo
          cargo binstall -y $TOOL_NAME --version $TOOL_VERSION || cargo install $TOOL_NAME --version $TOOL_VERSION
        done
      if: steps.tool-cache.outputs.cache-hit != 'true'
